import { cx } from "@gf/cx";
import { ComponentPropsWithoutRef, Fragment, ReactNode } from "react";
import { Paper } from "./Paper";
import { Strength } from "@utils/light-tailwind-plugin/ElementDirection";

export type Text = (string | null)[] | string;
export interface CardProps
  extends Omit<ComponentPropsWithoutRef<"div">, "title"> {
  as?: React.ElementType;
  lightStrength?: Strength | number;
  title?: Text | ReactNode;
  body?: Text;
  optional?: Text;
  category?: keyof typeof categoryMap;
}

export function Card({
  className,
  as,
  lightStrength,
  title = [],
  body = [],
  optional = [],
  category,
  ...props
}: CardProps) {
  return (
    <Paper
      as={as}
      lightStrength={lightStrength}
      className={cx("aspect-card relative rounded-card", className)}
      {...props}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        style={{
          fillRule: "evenodd",
          clipRule: "evenodd",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeMiterlimit: 1.5,
        }}
        viewBox="0 0 835 1302"
      >
        {category ? (
          <>
            <text
              x={422}
              y={1238}
              className="font-montserrat"
              textAnchor="middle"
              style={{
                fontSize: 38,
                letterSpacing: "0.25em",
                fill: "#527c8e",
              }}
            >
              {categoryMap[category].title}
            </text>
            <path
              d={categoryMap[category].deco}
              style={{
                transform: "translateY(-3px)",
                fill: "#b8cdd6",
              }}
            />
          </>
        ) : null}

        {isText(title) ? <Title title={title} /> : title}

        <text
          x={0}
          y={440}
          className="font-montserrat"
          style={{
            fontSize: 38,
            letterSpacing: "0.025em",
            fill: "#152742",
          }}
        >
          {normalize(body).map((line, index) => (
            <tspan
              key={index}
              x={416}
              textAnchor="middle"
              dy={index !== 0 ? "1.26em" : undefined}
            >
              {line === null ? <>&nbsp;</> : line}
            </tspan>
          ))}

          {normalize(optional).map((line, index) => (
            <tspan
              key={index}
              x={416}
              textAnchor="middle"
              style={{ fill: "#527c8e" }}
              dy={index !== 0 ? "1.26em" : "2.52em"}
            >
              {line === null ? <>&nbsp;</> : line}
            </tspan>
          ))}
        </text>
      </svg>
    </Paper>
  );
}

function isText(text: Text | ReactNode): text is Text {
  return typeof text === "string" || Array.isArray(text);
}

interface TitleProps extends ComponentPropsWithoutRef<"text"> {
  title: Text;
  as?: React.ElementType;
}

export function Title({ title, as, style, className, ...props }: TitleProps) {
  const Component = as ?? "text";
  return (
    <Component
      x={0}
      y={226}
      className={cx("font-licorice", className)}
      style={{
        fontSize: 115,
        letterSpacing: "0.01em",
        fill: "#d68c45",
        ...style,
      }}
      {...props}
    >
      {normalize(title, 15).map((line, index) => (
        <tspan
          key={index}
          x={416}
          textAnchor="middle"
          dy={index !== 0 || title.length === 1 ? "0.86em" : undefined}
        >
          {line === null ? <>&nbsp;</> : line}
        </tspan>
      ))}
    </Component>
  );
}

const categoryMap = {
  dankbarkeit: {
    title: "Dankbarkeit",
    deco: "M226.802 1229.98c0 .81-.018.848-.591 1.421-.361.361-.918.462-1.411.591-.375.098-18.599-.758-34.819-.708-6.445.02-33.89.3-35.865.317-33.175.286-58.683-.61-76.497-.208-10.934.247-10.93.274-21.864.59-1.723.049-1.659-.399-2.317-1.993-.003-.008.579-1.419.591-1.431a2.103 2.103 0 0 1 1.411-.591c1.014-.015 20.342.754 34.978.707 6.195-.02 32.935-.299 34.993-.317 32.943-.289 59.534.626 77.914.196 10.495-.246 21.391-.621 21.475-.586.471.195 1.05.23 1.411.591.573.572.591.611.591 1.421ZM783.197 1229.98c0 .81-.019.848-.591 1.421-.361.361-.918.463-1.411.591-.376.098-18.725-.758-35.054-.708-6.488.02-34.119.3-36.107.317-33.399.286-59.079-.61-77.013-.208-11.009.247-11.005.274-22.012.59-1.723.049-1.66-.398-2.319-1.993-.003-.008.579-1.419.591-1.431a2.103 2.103 0 0 1 1.411-.591c1.02-.015 20.479.755 35.214.707 6.237-.02 33.158-.299 35.229-.317 33.165-.289 59.936.626 78.44.196 10.565-.246 21.536-.621 21.62-.586.47.195 1.05.23 1.411.591.572.572.591.611.591 1.421Z",
  },
  vision: {
    title: "Vision",
    deco: "M312.645 1229.97c0 .806-.018.844-.588 1.413-.358.359-.908.48-1.403.588-.455.1-27.982-.754-52.434-.704-19.355.04-57.874.454-86.32.364-13.034-.041-52.425-.339-63.624-.363-22.585-.049-52.553.753-52.673.703-.469-.195-1.045-.229-1.404-.588a64.062 64.062 0 0 1-.588-1.423c.194-.469.23-1.045.588-1.403.733-.733.838-.599 1.873-.579 15.16.289 34.454.732 52.204.694 9.426-.02 48.873-.292 52.7-.315 49.613-.288 89.66.623 117.341.195 15.807-.244 32.252-.618 32.337-.583.468.195 1.045.229 1.403.588.57.569.588.607.588 1.413ZM783.463 1229.97c0 .806-.018.844-.588 1.413-.359.359-.908.48-1.403.588-.454.1-27.92-.754-52.317-.704-19.312.04-57.745.454-86.127.364-13.005-.041-52.308-.339-63.483-.363-22.533-.049-52.435.753-52.555.703-.468-.195-1.045-.229-1.404-.588a64 64 0 0 1-.587-1.423c.193-.469.229-1.045.587-1.403.733-.732.838-.599 1.872-.579 15.126.289 34.378.732 52.087.694 9.405-.02 48.765-.292 52.583-.315 49.502-.288 89.46.623 117.079.195 15.772-.244 32.18-.618 32.265-.583.468.195 1.044.229 1.403.588.57.569.588.607.588 1.413Z",
  },
  wachstum: {
    title: "Wachstum",
    deco: "M263.683 1229.95c0 .97-.022 1.015-.707 1.701-.432.432-1.098.554-1.689.708-.451.116-22.543-.908-42.204-.848-7.811.024-41.078.359-43.471.38-40.211.342-71.129-.731-92.721-.249-13.256.295-13.251.328-26.501.705-2.064.059-1.989-.474-2.779-2.385-.004-.01.694-1.699.708-1.713a2.522 2.522 0 0 1 1.689-.708c1.228-.018 24.655.904 42.396.847 7.509-.024 39.921-.358 42.415-.379 39.929-.347 72.16.749 94.439.234 12.72-.294 25.929-.744 26.029-.702.563.235 1.257.276 1.689.708.685.685.707.731.707 1.701ZM783.463 1229.95c0 .97-.022 1.015-.708 1.701-.431.432-1.098.554-1.689.708-.45.116-22.543-.908-42.203-.848-7.812.024-41.078.359-43.472.38-40.211.342-71.128-.731-92.721-.249-13.255.295-13.25.328-26.501.705-2.064.059-1.989-.474-2.778-2.385a75.75 75.75 0 0 1 .707-1.713 2.523 2.523 0 0 1 1.69-.708c1.228-.018 24.655.904 42.396.847 7.508-.024 39.92-.358 42.414-.379 39.93-.347 72.161.749 94.439.234 12.721-.294 25.929-.744 26.029-.702.564.235 1.258.276 1.689.708.686.685.708.731.708 1.701Z",
  },
  reflexion: {
    title: "Reflexion",
    deco: "M269.941 1229.95c0 .97-.022 1.015-.708 1.701-.431.432-1.098.556-1.689.708-.457.117-23.228-.908-43.49-.848-8.049.024-42.33.359-44.796.38-41.437.342-73.297-.731-95.548-.249-13.656.295-13.651.328-27.309.705-2.071.058-2-.473-2.79-2.385-.004-.01.694-1.699.708-1.713 1.32-1.32 1.67-.591 29.391.009 14.554.315 39.08-.076 59.694-.249 41.147-.347 74.36.749 97.318.234 13.108-.294 26.722-.744 26.822-.702.564.235 1.258.276 1.689.708.686.685.708.731.708 1.701ZM783.463 1229.95c0 .97-.022 1.015-.708 1.701-.431.432-1.098.556-1.689.708-.456.117-23.228-.908-43.49-.848-8.049.024-42.33.359-44.796.38-41.437.342-73.297-.731-95.548-.249-13.656.295-13.651.328-27.309.705-2.071.058-2-.473-2.79-2.385-.004-.01.694-1.699.708-1.713 1.32-1.32 1.67-.591 29.391.009 14.554.315 39.08-.076 59.694-.249 41.147-.347 74.36.749 97.318.234 13.108-.294 26.722-.744 26.822-.702.564.235 1.258.276 1.689.708.686.685.708.731.708 1.701Z",
  },
  freiheit: {
    title: "Freiheit",
    deco: "M298.27 1229.95c0 .97-.022 1.015-.708 1.701-.431.432-1.096.563-1.689.708-.484.118-26.33-.908-49.313-.848-18.198.048-54.429.546-81.179.438-12.257-.049-49.302-.408-59.835-.437-21.221-.058-49.359.905-49.538.847-.58-.19-1.257-.276-1.689-.708a75.807 75.807 0 0 1-.708-1.713c.233-.564.276-1.258.708-1.689a2.517 2.517 0 0 1 1.689-.708c1.429-.018 28.805.904 49.538.847 8.865-.025 45.963-.353 49.562-.379 46.657-.347 84.32.749 110.352.234 14.865-.294 30.312-.744 30.413-.702.564.235 1.258.276 1.689.708.686.685.708.731.708 1.701ZM783.463 1229.95c0 .97-.022 1.015-.708 1.701-.431.432-1.096.563-1.689.708-.484.118-26.38-.908-49.406-.848-18.233.048-54.533.546-81.333.438-12.281-.049-49.396-.408-59.949-.437-21.262-.058-49.453.905-49.632.847-.58-.19-1.257-.276-1.689-.708a75.807 75.807 0 0 1-.708-1.713c.233-.564.276-1.258.708-1.689a2.517 2.517 0 0 1 1.689-.708c1.431-.018 28.86.904 49.632.847 8.882-.025 46.05-.353 49.656-.379 46.746-.347 84.48.749 110.561.234 14.893-.294 30.37-.744 30.471-.702.564.235 1.258.276 1.689.708.686.685.708.731.708 1.701Z",
  },
  anleitung: {
    title: "Anleitung",
    deco: "M270.396 1229.95c0 .97-.022 1.015-.708 1.701-.431.432-1.097.556-1.689.708-.457.117-23.278-.908-43.583-.848-8.067.024-42.421.359-44.893.38-41.526.342-73.455-.731-95.754-.249-13.685.295-13.68.328-27.367.705-2.071.057-2.001-.473-2.791-2.385-.004-.01.694-1.699.708-1.713 1.319-1.32 1.67-.591 29.45.009 14.586.315 39.165-.076 59.823-.249 41.235-.347 74.52.749 97.527.234 13.137-.294 26.78-.744 26.88-.702.564.235 1.258.276 1.689.708.686.685.708.731.708 1.701ZM783.463 1229.95c0 .97-.022 1.015-.708 1.701-.431.432-1.097.556-1.689.708-.457.117-23.328-.908-43.677-.848-8.084.024-42.512.359-44.989.38-41.615.342-73.612-.731-95.959-.249-13.716.295-13.711.328-27.426.705-2.072.057-2.002-.472-2.792-2.385-.004-.01.694-1.699.708-1.713 1.319-1.32 1.669-.591 29.51.009 14.616.315 39.248-.076 59.951-.249 41.324-.347 74.68.749 97.736.234 13.165-.294 26.838-.744 26.938-.702.564.235 1.258.276 1.689.708.686.685.708.731.708 1.701Z",
  },
} satisfies Record<
  string,
  {
    title: string;
    deco: string;
  }
>;

export function isCategoryKey(key: unknown): key is keyof typeof categoryMap {
  return typeof key === "string" && key in categoryMap;
}

function normalize(
  text: string | (string | null)[],
  maxLineLength: number = 28,
) {
  if (typeof text === "string") {
    return text
      .split(/\n|\r\n/g)
      .map((line) => {
        if (line.trim() === "") return null;
        const lines: string[] = [""];
        line.split(" ").forEach((word) => {
          if (lines.at(-1)!.length + word.length > maxLineLength) {
            lines.push(word);
          } else {
            lines.splice(-1, 1, String(lines.at(-1)! + " " + word).trim());
          }
        });

        return lines;
      })
      .flat();
  }
  return text;
}
