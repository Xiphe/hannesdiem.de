/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    genres: Genre;
    persons: Person;
    'cover-arts': CoverArt;
    releases: Release;
    'contribution-roles': ContributionRole;
    songs: Song;
    users: User;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    genres: GenresSelect<false> | GenresSelect<true>;
    persons: PersonsSelect<false> | PersonsSelect<true>;
    'cover-arts': CoverArtsSelect<false> | CoverArtsSelect<true>;
    releases: ReleasesSelect<false> | ReleasesSelect<true>;
    'contribution-roles': ContributionRolesSelect<false> | ContributionRolesSelect<true>;
    songs: SongsSelect<false> | SongsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs?: {
    tasks: unknown;
    workflows?: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "genres".
 */
export interface Genre {
  id: number;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "persons".
 */
export interface Person {
  id: number;
  name: string;
  link?: string | null;
  ogProfile?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cover-arts".
 */
export interface CoverArt {
  id: number;
  alt?: string | null;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "releases".
 */
export interface Release {
  id: number;
  title: string;
  slug: string;
  subtitle?: string | null;
  artist?: string | null;
  releaseDate?: string | null;
  hideReleaseDay?: boolean | null;
  cover?: (number | null) | CoverArt;
  contributors?:
    | {
        person: number | Person;
        roles: (number | ContributionRole)[];
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  genres?: (number | Genre)[] | null;
  languages?: ('english' | 'german')[] | null;
  summary?: string | null;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  tracks?:
    | {
        title: string;
        addition?: string | null;
        duration?: number | null;
        song?: (number | null) | Song;
        id?: string | null;
      }[]
    | null;
  shops?: {
    amazonmusic?: string | null;
    deezer?: string | null;
    qobuz?: string | null;
    tidal?: string | null;
    spotify?: string | null;
    anghami?: string | null;
    applemusic?: string | null;
    pandora?: string | null;
    youtubemusic?: string | null;
    awa?: string | null;
    soundcloud?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contribution-roles".
 */
export interface ContributionRole {
  id: number;
  role: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "songs".
 */
export interface Song {
  id: number;
  title: string;
  subtitle?: string | null;
  slug: string;
  sumrary?: string | null;
  creationDate?: string | null;
  hideCreationDay?: boolean | null;
  authors?:
    | {
        person: number | Person;
        roles: (number | ContributionRole)[];
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  lyrics?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'genres';
        value: number | Genre;
      } | null)
    | ({
        relationTo: 'persons';
        value: number | Person;
      } | null)
    | ({
        relationTo: 'cover-arts';
        value: number | CoverArt;
      } | null)
    | ({
        relationTo: 'releases';
        value: number | Release;
      } | null)
    | ({
        relationTo: 'contribution-roles';
        value: number | ContributionRole;
      } | null)
    | ({
        relationTo: 'songs';
        value: number | Song;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "genres_select".
 */
export interface GenresSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "persons_select".
 */
export interface PersonsSelect<T extends boolean = true> {
  name?: T;
  link?: T;
  ogProfile?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cover-arts_select".
 */
export interface CoverArtsSelect<T extends boolean = true> {
  alt?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "releases_select".
 */
export interface ReleasesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  subtitle?: T;
  artist?: T;
  releaseDate?: T;
  hideReleaseDay?: T;
  cover?: T;
  contributors?:
    | T
    | {
        person?: T;
        roles?: T;
        description?: T;
        id?: T;
      };
  genres?: T;
  languages?: T;
  summary?: T;
  description?: T;
  tracks?:
    | T
    | {
        title?: T;
        addition?: T;
        duration?: T;
        song?: T;
        id?: T;
      };
  shops?:
    | T
    | {
        amazonmusic?: T;
        deezer?: T;
        qobuz?: T;
        tidal?: T;
        spotify?: T;
        anghami?: T;
        applemusic?: T;
        pandora?: T;
        youtubemusic?: T;
        awa?: T;
        soundcloud?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contribution-roles_select".
 */
export interface ContributionRolesSelect<T extends boolean = true> {
  role?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "songs_select".
 */
export interface SongsSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  slug?: T;
  sumrary?: T;
  creationDate?: T;
  hideCreationDay?: T;
  authors?:
    | T
    | {
        person?: T;
        roles?: T;
        description?: T;
        id?: T;
      };
  lyrics?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}