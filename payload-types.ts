/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    images: Image;
    persons: Person;
    'cover-arts': CoverArt;
    releases: Release;
    'contribution-roles': ContributionRole;
    genres: Genre;
    songs: Song;
    recipes: Recipe;
    'recipe-sources': RecipeSource;
    'recipe-quantity-type': RecipeQuantityType;
    'recipe-ingredient': RecipeIngredient;
    users: User;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    images: ImagesSelect<false> | ImagesSelect<true>;
    persons: PersonsSelect<false> | PersonsSelect<true>;
    'cover-arts': CoverArtsSelect<false> | CoverArtsSelect<true>;
    releases: ReleasesSelect<false> | ReleasesSelect<true>;
    'contribution-roles': ContributionRolesSelect<false> | ContributionRolesSelect<true>;
    genres: GenresSelect<false> | GenresSelect<true>;
    songs: SongsSelect<false> | SongsSelect<true>;
    recipes: RecipesSelect<false> | RecipesSelect<true>;
    'recipe-sources': RecipeSourcesSelect<false> | RecipeSourcesSelect<true>;
    'recipe-quantity-type': RecipeQuantityTypeSelect<false> | RecipeQuantityTypeSelect<true>;
    'recipe-ingredient': RecipeIngredientSelect<false> | RecipeIngredientSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: 'en' | 'es' | 'de';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images".
 */
export interface Image {
  id: number;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "persons".
 */
export interface Person {
  id: number;
  name: string;
  link?: string | null;
  ogProfile?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cover-arts".
 */
export interface CoverArt {
  id: number;
  alt?: string | null;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "releases".
 */
export interface Release {
  id: number;
  title: string;
  slug: string;
  subtitle?: string | null;
  artist?: string | null;
  releaseDate?: string | null;
  hideReleaseDay?: boolean | null;
  cover?: (number | null) | CoverArt;
  contributors?:
    | {
        person: number | Person;
        roles: (number | ContributionRole)[];
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  genres?: (number | Genre)[] | null;
  languages?: ('english' | 'german')[] | null;
  summary?: string | null;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  tracks?:
    | {
        title: string;
        addition?: string | null;
        duration?: number | null;
        song?: (number | null) | Song;
        id?: string | null;
      }[]
    | null;
  shops?: {
    amazonmusic?: string | null;
    deezer?: string | null;
    qobuz?: string | null;
    tidal?: string | null;
    spotify?: string | null;
    anghami?: string | null;
    applemusic?: string | null;
    pandora?: string | null;
    youtubemusic?: string | null;
    awa?: string | null;
    soundcloud?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contribution-roles".
 */
export interface ContributionRole {
  id: number;
  role: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "genres".
 */
export interface Genre {
  id: number;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "songs".
 */
export interface Song {
  id: number;
  title: string;
  subtitle?: string | null;
  slug: string;
  sumrary?: string | null;
  creationDate?: string | null;
  hideCreationDay?: boolean | null;
  authors?:
    | {
        person: number | Person;
        roles: (number | ContributionRole)[];
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  lyrics?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recipes".
 */
export interface Recipe {
  id: number;
  uuid?: string | null;
  name: string;
  /**
   * Overall “prep” duration in minutes, if needed.
   */
  duration?: number | null;
  /**
   * Overall “cooking” duration in minutes, if needed.
   */
  cookingDuration?: number | null;
  serves?: number | null;
  defaultScale?: number | null;
  source?: (number | null) | RecipeSource;
  'ingredient-sections'?:
    | {
        /**
         * Can be empty when there is only one section
         */
        title?: string | null;
        'section-ingredients'?:
          | {
              quantity: number;
              'quantity-type': number | RecipeQuantityType;
              ingredient: number | RecipeIngredient;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  'step-sections'?:
    | {
        /**
         * Can be empty when there is only one section
         */
        title?: string | null;
        'section-steps'?:
          | {
              step?: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              } | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  images?:
    | {
        image?: (number | null) | Image;
        id?: string | null;
      }[]
    | null;
  notes?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  neutritionalInfo?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recipe-sources".
 */
export interface RecipeSource {
  id: number;
  name: string;
  url: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recipe-quantity-type".
 */
export interface RecipeQuantityType {
  id: number;
  name: string;
  singular?: string | null;
  plural?: string | null;
  fraction?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recipe-ingredient".
 */
export interface RecipeIngredient {
  id: number;
  name: string;
  plural: string;
  recipe?: (number | null) | Recipe;
  affiliateUrl?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'images';
        value: number | Image;
      } | null)
    | ({
        relationTo: 'persons';
        value: number | Person;
      } | null)
    | ({
        relationTo: 'cover-arts';
        value: number | CoverArt;
      } | null)
    | ({
        relationTo: 'releases';
        value: number | Release;
      } | null)
    | ({
        relationTo: 'contribution-roles';
        value: number | ContributionRole;
      } | null)
    | ({
        relationTo: 'genres';
        value: number | Genre;
      } | null)
    | ({
        relationTo: 'songs';
        value: number | Song;
      } | null)
    | ({
        relationTo: 'recipes';
        value: number | Recipe;
      } | null)
    | ({
        relationTo: 'recipe-sources';
        value: number | RecipeSource;
      } | null)
    | ({
        relationTo: 'recipe-quantity-type';
        value: number | RecipeQuantityType;
      } | null)
    | ({
        relationTo: 'recipe-ingredient';
        value: number | RecipeIngredient;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images_select".
 */
export interface ImagesSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "persons_select".
 */
export interface PersonsSelect<T extends boolean = true> {
  name?: T;
  link?: T;
  ogProfile?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cover-arts_select".
 */
export interface CoverArtsSelect<T extends boolean = true> {
  alt?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "releases_select".
 */
export interface ReleasesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  subtitle?: T;
  artist?: T;
  releaseDate?: T;
  hideReleaseDay?: T;
  cover?: T;
  contributors?:
    | T
    | {
        person?: T;
        roles?: T;
        description?: T;
        id?: T;
      };
  genres?: T;
  languages?: T;
  summary?: T;
  description?: T;
  tracks?:
    | T
    | {
        title?: T;
        addition?: T;
        duration?: T;
        song?: T;
        id?: T;
      };
  shops?:
    | T
    | {
        amazonmusic?: T;
        deezer?: T;
        qobuz?: T;
        tidal?: T;
        spotify?: T;
        anghami?: T;
        applemusic?: T;
        pandora?: T;
        youtubemusic?: T;
        awa?: T;
        soundcloud?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contribution-roles_select".
 */
export interface ContributionRolesSelect<T extends boolean = true> {
  role?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "genres_select".
 */
export interface GenresSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "songs_select".
 */
export interface SongsSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  slug?: T;
  sumrary?: T;
  creationDate?: T;
  hideCreationDay?: T;
  authors?:
    | T
    | {
        person?: T;
        roles?: T;
        description?: T;
        id?: T;
      };
  lyrics?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recipes_select".
 */
export interface RecipesSelect<T extends boolean = true> {
  uuid?: T;
  name?: T;
  duration?: T;
  cookingDuration?: T;
  serves?: T;
  defaultScale?: T;
  source?: T;
  'ingredient-sections'?:
    | T
    | {
        title?: T;
        'section-ingredients'?:
          | T
          | {
              quantity?: T;
              'quantity-type'?: T;
              ingredient?: T;
              id?: T;
            };
        id?: T;
      };
  'step-sections'?:
    | T
    | {
        title?: T;
        'section-steps'?:
          | T
          | {
              step?: T;
              id?: T;
            };
        id?: T;
      };
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  notes?: T;
  neutritionalInfo?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recipe-sources_select".
 */
export interface RecipeSourcesSelect<T extends boolean = true> {
  name?: T;
  url?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recipe-quantity-type_select".
 */
export interface RecipeQuantityTypeSelect<T extends boolean = true> {
  name?: T;
  singular?: T;
  plural?: T;
  fraction?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recipe-ingredient_select".
 */
export interface RecipeIngredientSelect<T extends boolean = true> {
  name?: T;
  plural?: T;
  recipe?: T;
  affiliateUrl?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}